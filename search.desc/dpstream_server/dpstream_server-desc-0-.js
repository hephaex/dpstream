searchState.loadedDescShard("dpstream_server", 0, "dpstream-server library\nMacro for easy error creation with context\nMacro for creating error reports\nInput processing module for dpstream server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDolphin emulator configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShutdown the Dolphin manager and cleanup all resources\nMain error type for dpstream server operations with …\nEmulator-related errors\nContains the error value\nError context extension for better error reporting\nEnhanced error reporting with context and correlation …\nError severity levels for monitoring and alerting\nInput-related errors\nNetwork-related errors\nContains the success value\nResult type alias for dpstream operations\nStreaming-related errors\nVPN-related errors\nGet error code for programmatic handling\nFormat error for structured logging\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if error is recoverable\nGet suggested recovery actions\nGet recommended retry delay in milliseconds\nGet error severity level for monitoring and alerting\nConvert to a user-friendly message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nInput processing statistics\nMoonlight input packet from client\nMain input manager for the server\nTouch point data\nDolphin emulator input adapter\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet input statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad game-specific controller profile\nController mapping and configuration system\nCreate a new server input manager\nProcess input from all sessions with enhanced error …\nInput processing and transformation module\nRegister a new client session\nRemove a client session\nUpdate controller mapping for a session\nAdapter status information\nAdapter for sending input commands to Dolphin emulator\nCheck connection health and attempt recovery if needed\nConnect a controller to a specific player slot\nDisconnect controller from player slot\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet adapter status\nInitialize connection to Dolphin\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Dolphin input adapter\nSend multiple commands to Dolphin\nShutdown the adapter\nCalibration data for analog inputs\nConsole type for mapping\nController mapping configuration\nGame-specific controller profiles\nMapping presets for quick setup\nDefault GameCube controller mapping\nDefault Wii Remote mapping\nCustom mapping for specific games\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet all available presets\nGet preset by name\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad profile for a specific game\nLoad mapping from file\nLoad profile from file\nSave mapping to file\nSave profile to file\nAnalog stick types\nGameCube/Wii controller buttons\nCommands that can be sent to Dolphin emulator\nInput processor that handles transformation and buffering\nInput processing statistics\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet buffered commands for Dolphin\nGet buffered commands with batch size limit for …\nGet processing statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new input processor\nProcess a single input packet\nReset statistics\nCreate a new input processor with custom buffer size for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdvanced error correlation and recovery system for …\nMoonlight protocol implementation for dpstream server\nZero-copy video pipeline for maximum performance\nAudio processing errors\nCircuit breaker for automatic failure protection\nCircuit breaker configuration\nCircuit breaker performance metrics\nCircuit breaker state machine\nCircuit breaker state changed\nCircuit is closed, allowing all requests\nCorrelation closed without resolution\nComplete service unavailability\nConfiguration errors\nError correlation created\nError correlation resolved\nCorrelation status tracking\nCritical severity, service unavailable\nDatabase connection/query errors\nDisk I/O statistics\nGlobal error recovery system instance\nComprehensive error context with telemetry\nError correlation tracking with distributed context\nError event for distributed notifications\nError event types\nError handling performance metrics\nNew error occurred\nError recovery system configuration\nError recovery statistics\nEnterprise-grade error recovery system with distributed …\nError severity levels\nError classification types\nRecovery failed, manual intervention required\nCircuit is half-open, testing if service is healthy\nHigh severity, significant functionality affected\nFile system I/O errors\nRecovery is still in progress\nLow severity, minimal impact\nMedium severity, some functionality affected\nMemory allocation failures\nMinimal impact, degraded performance\nModerate impact, some features unavailable\nNetwork connectivity issues\nNew correlation, analysis in progress\nNo user impact\nCircuit is open, rejecting all requests\nRecovery failed permanently\nProtocol parsing errors\nAnalysis completed, recovery in progress\nRecovery attempt tracking\nRecovery completed\nRecovery operation result\nRecovery attempt started\nRecovery strategy trait for pluggable recovery mechanisms\nRecovery completed successfully\nSystem resource exhaustion\nRecovery failed but should be retried\nAuthentication/authorization failures\nExternal service failures\nSevere impact, major functionality unavailable\nDistributed tracing span context\nRecovery was successful\nSystem context snapshot for error analysis\nUnknown/uncategorized errors\nUser impact assessment\nVideo encoding/decoding errors\nActive connections count\nAffected components and services\nAvailable memory in bytes\nCheck if this strategy can handle the given error type\nCircuit breaker configurations by component\nComponent that generated the error\nCorrelation cleanup interval\nUnique correlation ID for tracking across services\nError correlation ID\nMaximum age for resolved correlations\nCPU usage percentage\nCorrelation metadata\nStructured error details\nDisk I/O statistics\nEnable distributed error notifications\nChain of related errors\nUnique error ID\nError sampling rate for high-frequency errors\nError type classification\nNumber of failures before opening circuit\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet current state\nGet error recovery statistics\nMaximum concurrent requests in half-open state\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if requests should be allowed\nCurrent load average\nMaximum number of active correlations\nMaximum recovery attempts per error\nMemory usage in bytes\nHuman-readable error message\nGet strategy name for logging\nNetwork bandwidth utilization\nCreate a new error recovery system\nCreate a new circuit breaker\nOperation that was being performed\nGet strategy priority (higher = more preferred)\nRecord a failed operation\nRecord a successful operation\nAttempt to recover from the given error\nRecovery attempts and their results\nTime to wait before attempting recovery\nRegister an error with automatic correlation and recovery\nRequest timeout for circuit breaker decisions\nRoot cause error that started the correlation chain\nError severity level\nDistributed tracing span context\nStack trace if available\nSubscribe to error events\nNumber of successful requests needed to close circuit\nSystem context at time of error\nTimestamp with high precision\nUser impact assessment\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAudio configuration\nAudio frame data\nOptimized audio streaming component with bounded channels\nClient capabilities received during handshake\nInput events from client\nHigh-performance input handling component\nMoonlight streaming server with optimized concurrent access\nNegotiated stream configuration after capability exchange\nPerformance monitoring for optimization with cache-aligned …\nServer configuration\nServer statistics\nStream configuration\nStream statistics\nStreaming session for a connected client\nVideo frame data (stub for disabled capture module)\nOptimized video streaming component with bounded channels\nBroadcast audio frame to all clients\nBroadcast video frame to all clients\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet server statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new Moonlight server with updated config structure\nGet the server port\nRun the server main loop\nSet the health monitor for health endpoints\nSet the input manager for handling client input\nStart the Moonlight server\nStop the Moonlight server\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nErrors that can occur during buffer pool operations\nHigh-performance video buffer pool with intelligent …\nZero-copy video buffer with pre-allocated memory pools\nAcquire a buffer of specified minimum size (zero-copy)\nEnable pressure-adaptive allocation\nIncrement reference count\nNumber of buffers per tier\nGet buffer capacity\nGet a slice of the current valid data\nGet a mutable slice for writing data (zero-copy)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet pool statistics for monitoring\nCalculate pool hit rate as percentage\nGet buffer ID for tracking\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMaximum total memory usage\nCreate a new video buffer pool with specified configuration\nCreate a new zero-copy buffer with specified capacity\nDecrement reference count and return true if should be …\nRelease a buffer back to the pool\nReset pool statistics\nSet the valid data length\nBuffer sizes for different tiers (720p, 1080p, 4K, etc.)")