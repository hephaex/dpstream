name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  quality-checks:
    name: Code Quality Checks
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        components: rustfmt, clippy
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Check formatting (server)
      run: |
        cd server
        cargo fmt --all -- --check

    - name: Run Clippy (server)
      run: |
        cd server
        cargo clippy --all-targets --no-default-features -- -D warnings

    - name: Security audit (server)
      run: |
        cargo install cargo-audit
        cd server
        cargo audit

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: quality-checks

    strategy:
      matrix:
        rust: [stable, beta]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust ${{ matrix.rust }}
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ matrix.rust }}
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libssl-dev

    - name: Run tests (server)
      run: |
        cd server
        cargo test --all --no-default-features --verbose

    - name: Generate test coverage (server)
      if: matrix.rust == 'stable'
      run: |
        cargo install cargo-tarpaulin
        cd server
        cargo tarpaulin --no-default-features --workspace --timeout 120 --out Xml

    - name: Upload coverage to Codecov
      if: matrix.rust == 'stable'
      uses: codecov/codecov-action@v3
      with:
        file: ./server/cobertura.xml
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build Binaries
    runs-on: ${{ matrix.os }}
    needs: quality-checks

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libssl-dev

    - name: Build server (debug)
      run: |
        cd server
        cargo build --no-default-features --verbose

    - name: Build server (release)
      run: |
        cd server
        cargo build --release --no-default-features --verbose

    - name: Upload build artifacts
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: dpstream-server-${{ runner.os }}
        path: |
          server/target/release/dpstream-server
          server/target/debug/dpstream-server

  documentation:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: quality-checks

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Generate documentation (server)
      run: |
        cd server
        cargo doc --all --no-deps --no-default-features

    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./server/target/doc

  security:
    name: Security Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      contents: read
      actions: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: 'cpp'  # Rust is analyzed as C++
        queries: security-and-quality

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          pkg-config \
          libssl-dev

    - name: Build for CodeQL analysis
      run: |
        cd server
        cargo build --release --no-default-features

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:cpp"

    - name: Run cargo-deny
      uses: EmbarkStudios/cargo-deny-action@v1
      with:
        log-level: warn
        command: check
        arguments: --workspace

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build, documentation]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        override: true

    - name: Build release artifacts
      run: |
        cd server
        cargo build --release --no-default-features

    - name: Create release package
      run: |
        mkdir -p release-package
        cp server/target/release/dpstream-server release-package/
        cp README.md release-package/
        cp .env.example release-package/
        tar -czf dpstream-${{ github.event.release.tag_name }}.tar.gz release-package/

    - name: Upload release assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./dpstream-${{ github.event.release.tag_name }}.tar.gz
        asset_name: dpstream-${{ github.event.release.tag_name }}.tar.gz
        asset_content_type: application/gzip

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, build, documentation]
    if: always()

    steps:
    - name: Notify on success
      if: ${{ success() }}
      run: echo "✅ CI/CD pipeline completed successfully!"

    - name: Notify on failure
      if: ${{ failure() }}
      run: echo "❌ CI/CD pipeline failed!"