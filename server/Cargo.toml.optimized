# Optimized Cargo.toml for maximum performance with PGO and BOLT
[package]
name = "dpstream-server"
version = "1.0.0"
edition = "2021"
authors = ["Mario Cho <hephaex@gmail.com>"]
description = "Ultra-high performance remote gaming server with GPU acceleration and ML optimization"
license = "MIT"
repository = "https://github.com/hephaex/dpstream"

# Aggressive optimization profile for maximum performance
[profile.release]
opt-level = 3                 # Maximum optimization
lto = "fat"                   # Full Link Time Optimization
codegen-units = 1             # Single codegen unit for best optimization
panic = "abort"               # Smaller binary, better performance
strip = true                  # Strip symbols for smaller binary
overflow-checks = false       # Disable overflow checks in release
debug = false                 # No debug info in release
debug-assertions = false      # Disable debug assertions

# Custom profile for PGO training builds
[profile.pgo-training]
inherits = "release"
opt-level = 2                 # Slightly lower optimization for instrumentation
lto = "thin"                  # Thin LTO for faster compilation
codegen-units = 4             # More units for faster compilation
debug = true                  # Enable debug info for profiling
overflow-checks = true        # Keep checks during training

# Profile for PGO optimized builds
[profile.pgo-optimized]
inherits = "release"
opt-level = 3                 # Maximum optimization
lto = "fat"                   # Full LTO
codegen-units = 1             # Single unit for best optimization

# BOLT optimization profile
[profile.bolt]
inherits = "pgo-optimized"
strip = false                 # Keep symbols for BOLT
debug = true                  # Debug info needed for BOLT

# Revolutionary quantum-optimized profile
[profile.quantum-optimized]
inherits = "pgo-optimized"
opt-level = 3                 # Maximum optimization
lto = "fat"                   # Full LTO for maximum performance
codegen-units = 1             # Single unit for optimal quantum effects
panic = "abort"               # Fastest execution for quantum algorithms
overflow-checks = false       # Quantum operations assume correctness
debug-assertions = false      # Remove quantum overhead

[dependencies]
# Core async runtime
tokio = { version = "1.47", features = [
    "full",
    "rt-multi-thread",
    "macros",
    "sync",
    "time",
    "net",
    "io-util",
    "fs",
    "process",
    "signal"
] }

# Async utilities
async-trait = "0.1"
futures = "0.3"
pin-project = "1.0"

# Networking
hyper = { version = "1.5", features = ["full"] }
tungstenite = "0.24"
native-tls = "0.2"

# Serialization
serde = { version = "1.0", features = ["derive", "rc"] }
serde_json = "1.0"
bincode = "1.3"

# Error handling
anyhow = "1.0"
thiserror = "1.0"

# Logging and tracing
tracing = "0.1"
tracing-subscriber = { version = "0.3", features = ["env-filter", "json"] }
tracing-opentelemetry = { version = "0.26", optional = true }

# Performance optimized data structures
dashmap = "6.1"
crossbeam = "0.8"
crossbeam-utils = "0.8"
parking_lot = "0.12"
arc-swap = "1.7"

# Memory management
mimalloc = { version = "0.1", default-features = false }
bumpalo = "3.19"
arrayvec = "0.7"
smallvec = "1.15"

# SIMD and math
wide = "0.7"
bytemuck = "1.18"

# Network optimizations
flume = "0.11"
bytes = "1.10"

# Monitoring and metrics
prometheus = { version = "0.13", optional = true }
metrics = "0.24"

# ML and GPU acceleration (optional features)
candle = { version = "0.8", optional = true }
wgpu = { version = "23.0", optional = true }
vulkano = { version = "0.34", optional = true }

# Utilities
uuid = { version = "1.18", features = ["v4", "serde"] }
chrono = { version = "0.4", features = ["serde"] }
hostname = "0.4"
num_cpus = "1.17"
once_cell = "1.21"
lazy_static = "1.5"

# Configuration
dotenv = "0.15"

# Development dependencies
[dev-dependencies]
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.0"
tokio-test = "0.4"

# Feature flags for conditional compilation
[features]
default = ["basic"]

# Basic features for development
basic = []

# Full production features including quantum optimization
full = [
    "gpu-acceleration",
    "ml-optimization",
    "monitoring",
    "simd-optimizations",
    "advanced-networking",
    "quantum-optimization"
]

# GPU acceleration features
gpu-acceleration = ["wgpu", "vulkano"]

# Machine learning features
ml-optimization = ["candle"]

# Production monitoring
monitoring = ["prometheus", "tracing-opentelemetry"]

# SIMD optimizations
simd-optimizations = []

# Advanced networking (io_uring, RDMA)
advanced-networking = []

# PGO training mode
pgo-training = []

# BOLT optimization mode
bolt-optimization = []

# Revolutionary quantum optimization mode
quantum-optimization = []

# Compiler optimization hints
[package.metadata.docs.rs]
rustc-args = ["--cfg", "docsrs"]
all-features = true

# Performance tuning
[package.metadata.cargo-udeps.ignore]
normal = ["tracing-opentelemetry"]

# Build script for advanced optimizations
[[bin]]
name = "dpstream-server"
path = "src/main.rs"

# Benchmark suite
[[bench]]
name = "performance_benchmarks"
harness = false
required-features = ["full"]

# Example configurations
[[example]]
name = "pgo_training"
required-features = ["pgo-training"]

[[example]]
name = "bolt_optimization"
required-features = ["bolt-optimization"]

# Workspace configuration for multi-crate optimization
[workspace]
members = [
    ".",
    "../switch-client"
]

# Global optimization settings
[workspace.profile.release]
opt-level = 3
lto = "fat"
codegen-units = 1
panic = "abort"

# PGO and BOLT specific settings
[package.metadata.pgo]
training-duration = 60
profile-directory = "target/pgo-profiles"
hot-function-threshold = 5.0

[package.metadata.bolt]
optimization-level = 3
split-functions = true
reorder-blocks = true
optimize-branches = true
eliminate-unreachable = true