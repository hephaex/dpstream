#!/bin/bash
set -e

COMMAND=${1}
PHASE=${2}
SUMMARY=${3}
TASKS=${4}
NEXT=${5}

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_usage() {
    echo "Usage: $0 <command> <phase> <summary> <tasks> <next>"
    echo ""
    echo "Commands:"
    echo "  sprint-complete  - Complete a sprint"
    echo "  phase-complete   - Complete a phase"
    echo "  backup          - Daily backup"
    echo ""
    echo "Examples:"
    echo "  $0 sprint-complete 'Sprint-1' 'Foundation complete' 'Setup, VPN, Dev env' 'Core modules'"
    echo "  $0 phase-complete 'Phase-1' 'Foundation phase done' 'Sprint 1-2 complete' 'Phase 2'"
    echo "  $0 backup 'Work description'"
}

create_history_file() {
    local filename=$1
    local title=$2
    local summary=$3
    local tasks=$4
    local next_steps=$5

    cat > ".history/$filename" << EOF
# $title

**Date**: $(date '+%Y-%m-%d %H:%M:%S')
**Repository**: git@github.com:hephaex/dpstream.git
**Maintainer**: hephaex@gmail.com

## Summary

$summary

## Tasks Completed

$tasks

## Technical Details

### Files Modified/Created
\`\`\`
$(git diff --name-only HEAD~1 2>/dev/null || echo "Initial commit")
\`\`\`

### Code Statistics
\`\`\`
Total Rust files: $(find . -name "*.rs" -not -path "./target/*" | wc -l)
Total lines of code: $(find . -name "*.rs" -not -path "./target/*" -exec wc -l {} + 2>/dev/null | tail -1 | awk '{print $1}' || echo "0")
\`\`\`

### Build Status
\`\`\`
$(cd server && cargo check 2>&1 || echo "Build check failed")
\`\`\`

## Next Steps

$next_steps

## Repository Information

- **Current Branch**: $(git branch --show-current)
- **Latest Commit**: $(git log -1 --oneline)
- **Files in Project**: $(find . -type f -not -path "./.git/*" -not -path "./target/*" | wc -l)

---

*Generated by git-workflow.sh on $(date)*
EOF

    echo -e "${GREEN}Created history file: .history/$filename${NC}"
}

case $COMMAND in
    "sprint-complete")
        if [ $# -ne 5 ]; then
            echo -e "${RED}Error: sprint-complete requires 4 additional arguments${NC}"
            print_usage
            exit 1
        fi

        FILENAME="$(echo $PHASE | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/_/g')_$(date +%Y%m%d).md"

        echo -e "${BLUE}Completing sprint: $PHASE${NC}"

        # Create history documentation
        create_history_file "$FILENAME" "$PHASE Complete" "$SUMMARY" "$TASKS" "$NEXT"

        # Git operations
        echo -e "${YELLOW}Adding files to git...${NC}"
        git add .

        echo -e "${YELLOW}Creating commit...${NC}"
        git commit -m "Complete $PHASE: $SUMMARY

Tasks completed:
$TASKS

Next: $NEXT

Author: Mario Cho <hephaex@gmail.com>"

        echo -e "${YELLOW}Pushing to repository...${NC}"
        git push origin main || git push origin master || echo "Push failed - check branch name"

        echo -e "${GREEN}Sprint $PHASE completed successfully!${NC}"
        ;;

    "phase-complete")
        if [ $# -ne 5 ]; then
            echo -e "${RED}Error: phase-complete requires 4 additional arguments${NC}"
            print_usage
            exit 1
        fi

        FILENAME="$(echo $PHASE | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/_/g')_complete_$(date +%Y%m%d).md"

        echo -e "${BLUE}Completing phase: $PHASE${NC}"

        # Create history documentation
        create_history_file "$FILENAME" "$PHASE Complete" "$SUMMARY" "$TASKS" "$NEXT"

        # Git operations
        git add .
        git commit -m "Complete $PHASE: $SUMMARY

$TASKS

Next: $NEXT

Author: Mario Cho <hephaex@gmail.com>"

        # Create tag for phase
        TAG_NAME="$(echo $PHASE | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/_/g')-$(date +%Y%m%d)"
        git tag -a "$TAG_NAME" -m "$PHASE complete: $SUMMARY"

        git push origin main || git push origin master || echo "Push failed - check branch name"
        git push origin "$TAG_NAME"

        echo -e "${GREEN}Phase $PHASE completed successfully with tag: $TAG_NAME${NC}"
        ;;

    "backup")
        if [ $# -ne 2 ]; then
            echo -e "${RED}Error: backup requires 1 additional argument (description)${NC}"
            print_usage
            exit 1
        fi

        DESCRIPTION=$2
        FILENAME="backup_$(date +%Y%m%d_%H%M).md"

        echo -e "${BLUE}Creating backup: $DESCRIPTION${NC}"

        create_history_file "$FILENAME" "Daily Backup" "$DESCRIPTION" "Development work in progress" "Continue development"

        git add .
        git commit -m "Backup: $DESCRIPTION

Author: Mario Cho <hephaex@gmail.com>"

        git push origin main || git push origin master || echo "Push failed - check branch name"

        echo -e "${GREEN}Backup completed successfully!${NC}"
        ;;

    *)
        echo -e "${RED}Error: Unknown command '$COMMAND'${NC}"
        print_usage
        exit 1
        ;;
esac